generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator drizzle {
  provider = "drizzle-prisma-generator"
  output   = "../src/lib/server/db" // Where to put generated Drizle tables
}

model User {
  id             String     @id @default(cuid())
  name           String
  image          String
  username       String?
  email          String     @unique
  emailVerified  DateTime?
  walletAddress  String?    @unique
  bio            String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  accounts       Account[]
  playlists      Playlist[]
  Release        Release[]
  releasedTracks Track[]    @relation("releasedTracks")
  likedTracks    Track[]    @relation("likedTracks")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Playlist {
  id            String          @id @default(cuid())
  name          String
  description   String?
  isPublic      Boolean         @default(true)
  coverUrl      String?
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlaylistTrack PlaylistTrack[]

  @@index([userId])
}

model PlaylistTrack {
  playlistId String
  trackId    String
  position   Int
  addedAt    DateTime @default(now())
  Playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  Track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
}

model Release {
  id          String      @id @default(cuid())
  title       String
  type        ReleaseType
  genre       String?
  description String?
  artistId    String
  coverUrl    String?
  releaseDate DateTime    @db.Date
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  Artist      User        @relation(fields: [artistId], references: [id], onDelete: Cascade)
  Track       Track[]

  @@index([artistId])
  @@index([type])
}

model Track {
  id            String          @id @default(cuid())
  title         String
  artistId      String
  genre         String?
  mimeType      String?
  fileSize      Int?
  duration      Int?
  uploadedAt    DateTime        @default(now())
  suiId         String?         @unique
  streamCount   Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  releaseId     String
  trackNumber   Int
  blobName      String?
  PlaylistTrack PlaylistTrack[]
  artist        User            @relation("releasedTracks", fields: [artistId], references: [id], onDelete: Cascade)
  Release       Release         @relation(fields: [releaseId], references: [id])
  usersWhoLike  User[]          @relation("likedTracks")

  @@index([artistId])
  @@index([genre])
}

enum ReleaseType {
  SINGLE
  EP
  LP
  COMPILATION
  MIXTAPE
}
